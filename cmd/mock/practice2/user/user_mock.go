// Code generated by MockGen. DO NOT EDIT.
// Source: ./user.go

// Package user is a generated GoMock package.
package user

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// AAA mocks base method.
func (m *MockDB) AAA(a int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AAA", a)
}

// AAA indicates an expected call of AAA.
func (mr *MockDBMockRecorder) AAA(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AAA", reflect.TypeOf((*MockDB)(nil).AAA), a)
}

// Get mocks base method.
func (m *MockDB) Get(id int64) ([]User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].([]User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDBMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDB)(nil).Get), id)
}

// GetUsersNameReceiver mocks base method.
func (m *MockDB) GetUsersNameReceiver(id1, id2 int64) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersNameReceiver", id1, id2)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUsersNameReceiver indicates an expected call of GetUsersNameReceiver.
func (mr *MockDBMockRecorder) GetUsersNameReceiver(id1, id2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersNameReceiver", reflect.TypeOf((*MockDB)(nil).GetUsersNameReceiver), id1, id2)
}
